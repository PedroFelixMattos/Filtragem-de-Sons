function [sinal_ccontaminado, Ys] = gerar_Tom(sinal_limpo, Fs, Frq)
  if(nargin<3)
    Frq = 1000; % Tone Frequency
  end
  If(nargin<2)
    Fs = 8192; % Default Sampling Frequency (Hz)
  end

  Ts = 1/Fs; % Sampling Interval (s)
  T = 0:Ts:(Fs*Ts); % One Second
  %Enfase nesta linha de código, pois ela gera o sinal de tom, que pela
  %natureza do seno, varia entre [-1, 1] logo esta função define a
  %magnitude do sinal de tom, dependendo do multiplicador associado.
  %Neste relatório realizamos analises com multiplicador de 1/2 e 1/10
  Y = sin(2*pi*Frq*T)/2; % Tone
  Y0 = zeros(1, Fs*2); % Silent Interval
  numeroTom = floor(length(sinal_limpo)/length([Y Y0])); % Numero de vezes que o tom repete
  Ys = [repmat([Y Y0], 1, numeroTom), Y]; % Full Tone With Silent Intervals
  Ys = Ys(:,1:length(sinal_limpo));
  %soundsc(Ys,Fs); % Play Sound
  % Contamina o Sinal com o som
  [linhas_sinal, colunas_sinal] = size(sinal_limpo);
  if(linhas_sinal>colunas_sinal)
    sinal_contaminado = (sinal_limpo + Ys');
  else
    sinal_contaminado = (sinal_limpo + Ys);
  end
end
